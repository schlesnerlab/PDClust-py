import os
import itertools
import multiprocessing as mp
import pandas as pd
import numpy as np
import seaborn as sns

def get_pairwise_dissimilarity(args):
    '''
    Returns the pairwise dissimilarity of two pandas dataframes. Usually used internally within calculate_PD

            Parameters:
                    args(tuple): A tuple containing two DataFrame objects.
                    Both DataFrames should have 3 columns:
                        - The first column for the chromosome name.
                        - The second column for the starting position of a CpG site.
                        - The third column for the fractional methylation of the corresponding CpG site, represented as a percentage (e.g., 0 or 100).
            Returns:
                    tuple (row_label, col_label, pairwise_dissimilarity), where 
                        - row_label (str): name of the first cell
                        - col_label (str): name of the second cell
                        - pairwise_dissimilarity (float): calculated distance between those two cells
    '''

    row_label, col_label = args
    df1 = pd.read_csv(row_label, sep='\t', usecols=(0, 1, 3), names=['chr',
     'pos', 'meth'])
    df2 = pd.read_csv(col_label, sep='\t', usecols=(0, 1, 3), names=['chr',
     'pos', 'meth'])
    row_label, col_label = row_label.split('/')[-1].replace('.bed', ''), col_label.split('/')[-1].replace('.bed', '')
    merged_df = pd.merge(df1, df2, on=['chr', 'pos'], suffixes=('_df1', '_df2'), how='inner')
    total_cpgs = merged_df.shape[0] 
    pairwise_dissimilarity_total = np.sum(np.abs(merged_df['meth_df1'] - merged_df['meth_df2']))
    pairwise_dissimilarity = pairwise_dissimilarity_total / total_cpgs
    return (row_label, col_label, pairwise_dissimilarity)

def make_unique_combinations(path_to_bed_files):
    file_list = [path_to_bed_files + f for f in os.listdir(path_to_bed_files) if f.endswith('.bed')]
    assert len(file_list) != 0, f'No .bed files found in "{path_to_bed_files}"'
    unique_combinations = []
    for file_pair in itertools.combinations(file_list, 2):
        if set(file_pair) not in [set(pair) for pair in unique_combinations]:
            unique_combinations.append(file_pair)
    return unique_combinations

def calculate_PD(path_to_bed_files):
    num_processes = 4
    unique_combinations = make_unique_combinations(path_to_bed_files)
result_df = pd.DataFrame(index=[x for x in unique_combinations], columns=[x for x in unique_combinations])
    with mp.Pool(num_processes) as pool:
        results = pool.map(get_pairwise_dissimilarity, unique_combinations)
    for (col_df_path, row_df_path, dissimilarity) in results:
        col_label = col_df_path.split("/")[-1].replace('.bed', '')
        row_label = row_df_path.split("/")[-1].replace('.bed', '')
        result_df.at[col_label, row_label] = dissimilarity
    return result_df

def plot_heatmap(pd_dataframe):
    colors = ['red' if 'ESLAM' in x else 'blue' for x in pd_dataframe.columns]
    sns.clustermap(data=pd_dataframe, method='ward', metric='euclidean', figsize=(20, 20), col_color = colors, cmap='YlOrRd', xticklabels=False, yticklabels=False)

    cg.ax_row_dendrogram.set_visible(False)
    cg.ax_col_dendrogram.set_visible(True)

    plt.savefig('output.png')
